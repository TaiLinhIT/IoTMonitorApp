import React, { useState, useEffect } from "react";
import axios from "axios";
import { AuthStore } from "./AuthStore";
import { setAuthUpdateHandler } from "../services/axiosPrivate";
import { AuthContext } from "./AuthContextBase";

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [accessToken, setAccessToken] = useState<string | null>(null);
  const [isInitializing, setIsInitializing] = useState(true);

  const setAuth = ({ accessToken }: { accessToken: string }) => {
    // c·∫≠p nh·∫≠t AuthStore sync tr∆∞·ªõc
    AuthStore.setAuth({ accessToken });
    // r·ªìi m·ªõi update state
    setAccessToken(accessToken);
  };

  const clearAuth = () => {
    AuthStore.clearAuth();
    setAccessToken(null);
  };

  // üîÑ Khi app load l·∫°i, th·ª≠ refresh
  useEffect(() => {
    const tryRefresh = async () => {
      try {
        const res = await axios.post(
          "http://localhost:5039/api/Auth/refresh",
          {},
          { withCredentials: true }
        );
        const { accessToken } = res.data;

        // üü¢ update store & state
        setAuth({ accessToken });

        // üü¢ ƒë·ªìng b·ªô ng∆∞·ª£c l·∫°i qua callback (n·∫øu ƒë√£ set)
        // trick: g·ªçi l·∫°i ch√≠nh callback m√¨nh ƒë√£ set
        setAuthUpdateHandler((token: string) => {
          if (!token || typeof token !== "string") {
            clearAuth();
            return;
          }
          console.log("n√≥ l√† c√°i n√†y", token);
          setAuth({ accessToken: token });
        });
      } catch (err) {
        console.error("[AuthProvider] ‚ùå Refresh th·∫•t b·∫°i", err);
        clearAuth();
      } finally {
        setIsInitializing(false);
      }
    };
    tryRefresh();
  }, []);

  // üü¢ ƒëƒÉng k√Ω callback sync t·ª´ axiosPrivate ‚Üí AuthContext
  useEffect(() => {
    setAuthUpdateHandler((token: string) => {
      if (!token || typeof token !== "string") {
        clearAuth();
        return;
      }
      console.log("n√≥ l√† c√°i n√†y", token);
      setAuth({ accessToken: token });
    });
  }, []);

  if (isInitializing) {
    return <div>ƒêang kh·ªüi t·∫°o...</div>; // block UI khi ch∆∞a refresh xong
  }

  return (
    <AuthContext.Provider
      value={{ accessToken, setAuth, clearAuth, isInitializing }}
    >
      {children}
    </AuthContext.Provider>
  );
};
